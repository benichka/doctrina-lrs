// <auto-generated />
using System;
using Doctrina.Domain.Entities;
using Doctrina.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Doctrina.Persistence.Migrations
{
    [DbContext(typeof(DoctrinaDbContext))]
    [Migration("20190526192127_CreateTables")]
    partial class CreateTables
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Doctrina.Domain.Entities.ActivityDefinitionEntity", b =>
                {
                    b.Property<Guid>("ActivityDefinitionId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Descriptions")
                        .HasColumnType("ntext");

                    b.Property<string>("Extensions")
                        .HasColumnType("ntext");

                    b.Property<Guid?>("InteractionActivityInteractionId");

                    b.Property<string>("MoreInfo");

                    b.Property<string>("Names")
                        .HasColumnType("ntext");

                    b.Property<string>("Type");

                    b.HasKey("ActivityDefinitionId");

                    b.HasIndex("InteractionActivityInteractionId");

                    b.ToTable("ActivityDefinitions");
                });

            modelBuilder.Entity("Doctrina.Domain.Entities.ActivityEntity", b =>
                {
                    b.Property<string>("ActivityHash")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(32);

                    b.Property<string>("ActivityId")
                        .IsRequired()
                        .HasMaxLength(2083);

                    b.Property<Guid?>("DefinitionActivityDefinitionId");

                    b.HasKey("ActivityHash");

                    b.HasIndex("DefinitionActivityDefinitionId");

                    b.ToTable("Activities");
                });

            modelBuilder.Entity("Doctrina.Domain.Entities.AgentEntity", b =>
                {
                    b.Property<string>("AgentHash")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("GroupEntityAgentHash");

                    b.Property<string>("Mbox")
                        .HasMaxLength(128);

                    b.Property<string>("Mbox_SHA1SUM")
                        .HasMaxLength(40);

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.Property<int>("ObjectType");

                    b.Property<string>("OpenId");

                    b.HasKey("AgentHash");

                    b.HasIndex("GroupEntityAgentHash");

                    b.ToTable("Agents");

                    b.HasDiscriminator<int>("ObjectType").HasValue(1);
                });

            modelBuilder.Entity("Doctrina.Domain.Entities.ContextActivitiesEntity", b =>
                {
                    b.Property<Guid>("ContextActivitiesId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Category")
                        .HasColumnType("ntext");

                    b.Property<string>("Grouping")
                        .HasColumnType("ntext");

                    b.Property<string>("Other")
                        .HasColumnType("ntext");

                    b.Property<string>("Parent")
                        .HasColumnType("ntext");

                    b.HasKey("ContextActivitiesId");

                    b.ToTable("ContextActivities");
                });

            modelBuilder.Entity("Doctrina.Domain.Entities.ContextEntity", b =>
                {
                    b.Property<Guid>("ContextId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("ContextActivitiesId");

                    b.Property<string>("Extensions")
                        .HasColumnType("ntext");

                    b.Property<string>("InstructorAgentHash");

                    b.Property<string>("Language");

                    b.Property<string>("Platform");

                    b.Property<Guid?>("Registration");

                    b.Property<string>("Revision");

                    b.Property<string>("TeamAgentHash");

                    b.HasKey("ContextId");

                    b.HasIndex("ContextActivitiesId");

                    b.HasIndex("InstructorAgentHash");

                    b.HasIndex("TeamAgentHash");

                    b.ToTable("Contexts");
                });

            modelBuilder.Entity("Doctrina.Domain.Entities.Documents.ActivityProfileEntity", b =>
                {
                    b.Property<Guid>("ActivityProfileId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ActivityHash");

                    b.Property<string>("ProfileId")
                        .IsRequired();

                    b.Property<Guid?>("RegistrationId");

                    b.HasKey("ActivityProfileId");

                    b.HasIndex("ActivityHash");

                    b.ToTable("ActivityProfiles");
                });

            modelBuilder.Entity("Doctrina.Domain.Entities.Documents.ActivityStateEntity", b =>
                {
                    b.Property<Guid>("ActivityStateId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ActivityHash");

                    b.Property<string>("AgentHash");

                    b.Property<Guid?>("Registration");

                    b.Property<string>("StateId")
                        .IsRequired()
                        .HasMaxLength(2083);

                    b.HasKey("ActivityStateId");

                    b.HasIndex("ActivityHash");

                    b.HasIndex("AgentHash");

                    b.ToTable("ActivityStates");
                });

            modelBuilder.Entity("Doctrina.Domain.Entities.Documents.AgentProfileEntity", b =>
                {
                    b.Property<Guid>("AgentProfileId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AgentHash");

                    b.Property<string>("ProfileId")
                        .IsRequired()
                        .HasMaxLength(2083);

                    b.HasKey("AgentProfileId");

                    b.HasIndex("AgentHash");

                    b.HasIndex("ProfileId")
                        .IsUnique();

                    b.ToTable("AgentProfiles");
                });

            modelBuilder.Entity("Doctrina.Domain.Entities.InteractionActivities.InteractionActivityBase", b =>
                {
                    b.Property<Guid>("InteractionId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CorrectResponsesPattern");

                    b.Property<string>("InteractionType")
                        .IsRequired();

                    b.HasKey("InteractionId");

                    b.ToTable("InteractionActivities");

                    b.HasDiscriminator<string>("InteractionType").HasValue("InteractionActivityBase");
                });

            modelBuilder.Entity("Doctrina.Domain.Entities.ResultEntity", b =>
                {
                    b.Property<Guid>("ResultId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool?>("Completion");

                    b.Property<string>("Duration");

                    b.Property<long?>("DurationTicks");

                    b.Property<string>("Extensions")
                        .HasColumnType("ntext");

                    b.Property<string>("Response");

                    b.Property<bool?>("Success");

                    b.HasKey("ResultId");

                    b.ToTable("ResultEntity");
                });

            modelBuilder.Entity("Doctrina.Domain.Entities.StatementEntity", b =>
                {
                    b.Property<Guid?>("StatementId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ActorAgentHash")
                        .IsRequired();

                    b.Property<string>("AuthorityAgentHash");

                    b.Property<Guid?>("AuthorityId");

                    b.Property<Guid?>("ContextId");

                    b.Property<string>("FullStatement");

                    b.Property<Guid?>("ResultId");

                    b.Property<DateTimeOffset?>("Stored")
                        .IsRequired()
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset?>("Timestamp")
                        .IsRequired();

                    b.Property<string>("VerbHash")
                        .IsRequired();

                    b.Property<string>("Version")
                        .HasMaxLength(7);

                    b.Property<bool>("Voided")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.HasKey("StatementId");

                    b.HasIndex("ActorAgentHash");

                    b.HasIndex("AuthorityAgentHash");

                    b.HasIndex("ContextId");

                    b.HasIndex("ResultId");

                    b.HasIndex("VerbHash");

                    b.ToTable("Statements");
                });

            modelBuilder.Entity("Doctrina.Domain.Entities.StatementRefEntity", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("StatementRefId");

                    b.HasKey("Id");

                    b.ToTable("StatementRefEntity");
                });

            modelBuilder.Entity("Doctrina.Domain.Entities.SubStatementEntity", b =>
                {
                    b.Property<Guid>("SubStatementId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ActorAgentHash")
                        .IsRequired();

                    b.Property<Guid?>("ContextId");

                    b.Property<Guid?>("ResultId");

                    b.Property<DateTimeOffset?>("Timestamp")
                        .IsRequired();

                    b.Property<string>("VerbHash")
                        .IsRequired();

                    b.HasKey("SubStatementId");

                    b.HasIndex("ActorAgentHash");

                    b.HasIndex("ContextId");

                    b.HasIndex("ResultId");

                    b.HasIndex("VerbHash");

                    b.ToTable("SubStatements");
                });

            modelBuilder.Entity("Doctrina.Domain.Entities.VerbEntity", b =>
                {
                    b.Property<string>("VerbHash")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(32);

                    b.Property<string>("Display")
                        .HasColumnType("ntext");

                    b.Property<string>("Id")
                        .IsRequired()
                        .HasMaxLength(2083);

                    b.HasKey("VerbHash");

                    b.ToTable("Verbs");
                });

            modelBuilder.Entity("Doctrina.Domain.Entities.GroupEntity", b =>
                {
                    b.HasBaseType("Doctrina.Domain.Entities.AgentEntity");

                    b.ToTable("Groups");

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("Doctrina.Domain.Entities.InteractionActivities.ChoiceInteractionActivity", b =>
                {
                    b.HasBaseType("Doctrina.Domain.Entities.InteractionActivities.InteractionActivityBase");

                    b.Property<string>("Choices")
                        .HasColumnType("ntext");

                    b.HasDiscriminator().HasValue("choice");
                });

            modelBuilder.Entity("Doctrina.Domain.Entities.InteractionActivities.FillInInteractionActivity", b =>
                {
                    b.HasBaseType("Doctrina.Domain.Entities.InteractionActivities.InteractionActivityBase");

                    b.HasDiscriminator().HasValue("fill-in");
                });

            modelBuilder.Entity("Doctrina.Domain.Entities.InteractionActivities.LikertInteractionActivity", b =>
                {
                    b.HasBaseType("Doctrina.Domain.Entities.InteractionActivities.InteractionActivityBase");

                    b.Property<string>("Scale")
                        .HasColumnType("ntext");

                    b.HasDiscriminator().HasValue("likert");
                });

            modelBuilder.Entity("Doctrina.Domain.Entities.InteractionActivities.LongFillInInteractionActivity", b =>
                {
                    b.HasBaseType("Doctrina.Domain.Entities.InteractionActivities.InteractionActivityBase");

                    b.HasDiscriminator().HasValue("long-fill-in");
                });

            modelBuilder.Entity("Doctrina.Domain.Entities.InteractionActivities.MatchingInteractionActivity", b =>
                {
                    b.HasBaseType("Doctrina.Domain.Entities.InteractionActivities.InteractionActivityBase");

                    b.Property<string>("Source")
                        .HasColumnType("ntext");

                    b.Property<string>("Target")
                        .HasColumnType("ntext");

                    b.HasDiscriminator().HasValue("matching");
                });

            modelBuilder.Entity("Doctrina.Domain.Entities.InteractionActivities.NumericInteractionType", b =>
                {
                    b.HasBaseType("Doctrina.Domain.Entities.InteractionActivities.InteractionActivityBase");

                    b.HasDiscriminator().HasValue("NumericInteractionType");
                });

            modelBuilder.Entity("Doctrina.Domain.Entities.InteractionActivities.OtherInteractionActivity", b =>
                {
                    b.HasBaseType("Doctrina.Domain.Entities.InteractionActivities.InteractionActivityBase");

                    b.HasDiscriminator().HasValue("other");
                });

            modelBuilder.Entity("Doctrina.Domain.Entities.InteractionActivities.PerformanceInteractionActivity", b =>
                {
                    b.HasBaseType("Doctrina.Domain.Entities.InteractionActivities.InteractionActivityBase");

                    b.Property<string>("Steps")
                        .HasColumnType("ntext");

                    b.HasDiscriminator().HasValue("performance");
                });

            modelBuilder.Entity("Doctrina.Domain.Entities.InteractionActivities.SequencingInteractionActivity", b =>
                {
                    b.HasBaseType("Doctrina.Domain.Entities.InteractionActivities.InteractionActivityBase");

                    b.Property<string>("Choices")
                        .HasColumnName("SequencingInteractionActivity_Choices")
                        .HasColumnType("ntext");

                    b.HasDiscriminator().HasValue("sequencing");
                });

            modelBuilder.Entity("Doctrina.Domain.Entities.InteractionActivities.TrueFalseInteractionActivity", b =>
                {
                    b.HasBaseType("Doctrina.Domain.Entities.InteractionActivities.InteractionActivityBase");

                    b.HasDiscriminator().HasValue("true-false");
                });

            modelBuilder.Entity("Doctrina.Domain.Entities.ActivityDefinitionEntity", b =>
                {
                    b.HasOne("Doctrina.Domain.Entities.InteractionActivities.InteractionActivityBase", "InteractionActivity")
                        .WithMany()
                        .HasForeignKey("InteractionActivityInteractionId");
                });

            modelBuilder.Entity("Doctrina.Domain.Entities.ActivityEntity", b =>
                {
                    b.HasOne("Doctrina.Domain.Entities.ActivityDefinitionEntity", "Definition")
                        .WithMany()
                        .HasForeignKey("DefinitionActivityDefinitionId");
                });

            modelBuilder.Entity("Doctrina.Domain.Entities.AgentEntity", b =>
                {
                    b.HasOne("Doctrina.Domain.Entities.GroupEntity")
                        .WithMany("Members")
                        .HasForeignKey("GroupEntityAgentHash");

                    b.OwnsOne("Doctrina.Domain.Entities.Account", "Account", b1 =>
                        {
                            b1.Property<string>("AgentEntityAgentHash");

                            b1.Property<string>("HomePage")
                                .HasColumnName("Account_HomePage")
                                .HasMaxLength(2083);

                            b1.Property<string>("Name")
                                .HasColumnName("Account_Name")
                                .HasMaxLength(40);

                            b1.HasKey("AgentEntityAgentHash");

                            b1.HasIndex("HomePage", "Name")
                                .IsUnique()
                                .HasFilter("[Account_HomePage] IS NOT NULL AND [Account_Name] IS NOT NULL");

                            b1.ToTable("Agents");

                            b1.HasOne("Doctrina.Domain.Entities.AgentEntity")
                                .WithOne("Account")
                                .HasForeignKey("Doctrina.Domain.Entities.Account", "AgentEntityAgentHash")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("Doctrina.Domain.Entities.ContextEntity", b =>
                {
                    b.HasOne("Doctrina.Domain.Entities.ContextActivitiesEntity", "ContextActivities")
                        .WithMany()
                        .HasForeignKey("ContextActivitiesId");

                    b.HasOne("Doctrina.Domain.Entities.AgentEntity", "Instructor")
                        .WithMany()
                        .HasForeignKey("InstructorAgentHash");

                    b.HasOne("Doctrina.Domain.Entities.AgentEntity", "Team")
                        .WithMany()
                        .HasForeignKey("TeamAgentHash");
                });

            modelBuilder.Entity("Doctrina.Domain.Entities.Documents.ActivityProfileEntity", b =>
                {
                    b.HasOne("Doctrina.Domain.Entities.ActivityEntity", "Activity")
                        .WithMany()
                        .HasForeignKey("ActivityHash");

                    b.OwnsOne("Doctrina.Domain.Entities.Documents.DocumentEntity", "Document", b1 =>
                        {
                            b1.Property<Guid>("ActivityProfileEntityActivityProfileId");

                            b1.Property<string>("Checksum")
                                .IsRequired()
                                .HasMaxLength(50);

                            b1.Property<byte[]>("Content");

                            b1.Property<string>("ContentType")
                                .HasMaxLength(255);

                            b1.Property<DateTimeOffset>("CreateDate")
                                .ValueGeneratedOnAdd();

                            b1.Property<DateTimeOffset?>("LastModified")
                                .IsRequired()
                                .ValueGeneratedOnAddOrUpdate()
                                .HasDefaultValue(new DateTimeOffset(new DateTime(2019, 5, 26, 19, 21, 27, 539, DateTimeKind.Unspecified).AddTicks(7199), new TimeSpan(0, 0, 0, 0, 0)));

                            b1.HasKey("ActivityProfileEntityActivityProfileId");

                            b1.ToTable("ActivityProfiles");

                            b1.HasOne("Doctrina.Domain.Entities.Documents.ActivityProfileEntity")
                                .WithOne("Document")
                                .HasForeignKey("Doctrina.Domain.Entities.Documents.DocumentEntity", "ActivityProfileEntityActivityProfileId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("Doctrina.Domain.Entities.Documents.ActivityStateEntity", b =>
                {
                    b.HasOne("Doctrina.Domain.Entities.ActivityEntity", "Activity")
                        .WithMany()
                        .HasForeignKey("ActivityHash");

                    b.HasOne("Doctrina.Domain.Entities.AgentEntity", "Agent")
                        .WithMany()
                        .HasForeignKey("AgentHash");

                    b.OwnsOne("Doctrina.Domain.Entities.Documents.DocumentEntity", "Document", b1 =>
                        {
                            b1.Property<Guid>("ActivityStateEntityActivityStateId");

                            b1.Property<string>("Checksum")
                                .IsRequired()
                                .HasMaxLength(50);

                            b1.Property<byte[]>("Content");

                            b1.Property<string>("ContentType")
                                .HasMaxLength(255);

                            b1.Property<DateTimeOffset>("CreateDate")
                                .ValueGeneratedOnAdd();

                            b1.Property<DateTimeOffset?>("LastModified")
                                .IsRequired()
                                .ValueGeneratedOnAddOrUpdate()
                                .HasDefaultValue(new DateTimeOffset(new DateTime(2019, 5, 26, 19, 21, 27, 554, DateTimeKind.Unspecified).AddTicks(2222), new TimeSpan(0, 0, 0, 0, 0)));

                            b1.HasKey("ActivityStateEntityActivityStateId");

                            b1.ToTable("ActivityStates");

                            b1.HasOne("Doctrina.Domain.Entities.Documents.ActivityStateEntity")
                                .WithOne("Document")
                                .HasForeignKey("Doctrina.Domain.Entities.Documents.DocumentEntity", "ActivityStateEntityActivityStateId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("Doctrina.Domain.Entities.Documents.AgentProfileEntity", b =>
                {
                    b.HasOne("Doctrina.Domain.Entities.AgentEntity", "Agent")
                        .WithMany()
                        .HasForeignKey("AgentHash");

                    b.OwnsOne("Doctrina.Domain.Entities.Documents.DocumentEntity", "Document", b1 =>
                        {
                            b1.Property<Guid>("AgentProfileEntityAgentProfileId");

                            b1.Property<string>("Checksum")
                                .IsRequired()
                                .HasMaxLength(50);

                            b1.Property<byte[]>("Content");

                            b1.Property<string>("ContentType")
                                .HasMaxLength(255);

                            b1.Property<DateTimeOffset>("CreateDate")
                                .ValueGeneratedOnAdd();

                            b1.Property<DateTimeOffset?>("LastModified")
                                .IsRequired()
                                .ValueGeneratedOnAddOrUpdate()
                                .HasDefaultValue(new DateTimeOffset(new DateTime(2019, 5, 26, 19, 21, 27, 563, DateTimeKind.Unspecified).AddTicks(3426), new TimeSpan(0, 0, 0, 0, 0)));

                            b1.HasKey("AgentProfileEntityAgentProfileId");

                            b1.ToTable("AgentProfiles");

                            b1.HasOne("Doctrina.Domain.Entities.Documents.AgentProfileEntity")
                                .WithOne("Document")
                                .HasForeignKey("Doctrina.Domain.Entities.Documents.DocumentEntity", "AgentProfileEntityAgentProfileId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("Doctrina.Domain.Entities.ResultEntity", b =>
                {
                    b.OwnsOne("Doctrina.Domain.Entities.ScoreEntity", "Score", b1 =>
                        {
                            b1.Property<Guid>("ResultEntityResultId");

                            b1.Property<double?>("Max");

                            b1.Property<double?>("Min");

                            b1.Property<double?>("Raw");

                            b1.Property<double?>("Scaled");

                            b1.HasKey("ResultEntityResultId");

                            b1.ToTable("ResultEntity");

                            b1.HasOne("Doctrina.Domain.Entities.ResultEntity")
                                .WithOne("Score")
                                .HasForeignKey("Doctrina.Domain.Entities.ScoreEntity", "ResultEntityResultId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("Doctrina.Domain.Entities.StatementEntity", b =>
                {
                    b.HasOne("Doctrina.Domain.Entities.AgentEntity", "Actor")
                        .WithMany()
                        .HasForeignKey("ActorAgentHash")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Doctrina.Domain.Entities.AgentEntity", "Authority")
                        .WithMany()
                        .HasForeignKey("AuthorityAgentHash");

                    b.HasOne("Doctrina.Domain.Entities.ContextEntity", "Context")
                        .WithMany()
                        .HasForeignKey("ContextId");

                    b.HasOne("Doctrina.Domain.Entities.ResultEntity", "Result")
                        .WithMany()
                        .HasForeignKey("ResultId");

                    b.HasOne("Doctrina.Domain.Entities.VerbEntity", "Verb")
                        .WithMany()
                        .HasForeignKey("VerbHash")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsMany("Doctrina.Domain.Entities.AttachmentEntity", "Attachments", b1 =>
                        {
                            b1.Property<Guid>("AttachmentId")
                                .ValueGeneratedOnAdd();

                            b1.Property<string>("ContentType")
                                .IsRequired()
                                .HasMaxLength(255);

                            b1.Property<string>("Description")
                                .HasColumnType("ntext");

                            b1.Property<string>("Display")
                                .HasColumnType("ntext");

                            b1.Property<string>("FileUrl");

                            b1.Property<Guid>("Id");

                            b1.Property<int>("Length");

                            b1.Property<byte[]>("Payload");

                            b1.Property<string>("SHA2")
                                .IsRequired();

                            b1.Property<Guid>("StatementId");

                            b1.Property<string>("UsageType")
                                .IsRequired()
                                .HasMaxLength(2083);

                            b1.HasKey("AttachmentId");

                            b1.HasIndex("StatementId");

                            b1.ToTable("Statement_Attachments");

                            b1.HasOne("Doctrina.Domain.Entities.StatementEntity")
                                .WithMany("Attachments")
                                .HasForeignKey("StatementId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("Doctrina.Domain.Entities.StatementObjectEntity", "Object", b1 =>
                        {
                            b1.Property<Guid?>("StatementEntityStatementId");

                            b1.Property<string>("ActivityHash");

                            b1.Property<string>("AgentHash");

                            b1.Property<int>("ObjectType");

                            b1.Property<Guid?>("StatementRefId");

                            b1.Property<Guid?>("SubStatementId");

                            b1.HasKey("StatementEntityStatementId");

                            b1.HasIndex("ActivityHash");

                            b1.HasIndex("AgentHash");

                            b1.HasIndex("StatementRefId");

                            b1.HasIndex("SubStatementId");

                            b1.ToTable("Statements");

                            b1.HasOne("Doctrina.Domain.Entities.ActivityEntity", "Activity")
                                .WithMany()
                                .HasForeignKey("ActivityHash");

                            b1.HasOne("Doctrina.Domain.Entities.AgentEntity", "Agent")
                                .WithMany()
                                .HasForeignKey("AgentHash");

                            b1.HasOne("Doctrina.Domain.Entities.StatementEntity")
                                .WithOne("Object")
                                .HasForeignKey("Doctrina.Domain.Entities.StatementObjectEntity", "StatementEntityStatementId")
                                .OnDelete(DeleteBehavior.Cascade);

                            b1.HasOne("Doctrina.Domain.Entities.StatementRefEntity", "StatementRef")
                                .WithMany()
                                .HasForeignKey("StatementRefId");

                            b1.HasOne("Doctrina.Domain.Entities.SubStatementEntity", "SubStatement")
                                .WithMany()
                                .HasForeignKey("SubStatementId");
                        });
                });

            modelBuilder.Entity("Doctrina.Domain.Entities.SubStatementEntity", b =>
                {
                    b.HasOne("Doctrina.Domain.Entities.AgentEntity", "Actor")
                        .WithMany()
                        .HasForeignKey("ActorAgentHash")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Doctrina.Domain.Entities.ContextEntity", "Context")
                        .WithMany()
                        .HasForeignKey("ContextId");

                    b.HasOne("Doctrina.Domain.Entities.ResultEntity", "Result")
                        .WithMany()
                        .HasForeignKey("ResultId");

                    b.HasOne("Doctrina.Domain.Entities.VerbEntity", "Verb")
                        .WithMany()
                        .HasForeignKey("VerbHash")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsMany("Doctrina.Domain.Entities.AttachmentEntity", "Attachments", b1 =>
                        {
                            b1.Property<Guid>("AttachmentId")
                                .ValueGeneratedOnAdd();

                            b1.Property<string>("ContentType")
                                .IsRequired()
                                .HasMaxLength(255);

                            b1.Property<string>("Description")
                                .HasColumnType("ntext");

                            b1.Property<string>("Display")
                                .HasColumnType("ntext");

                            b1.Property<string>("FileUrl");

                            b1.Property<Guid>("Id");

                            b1.Property<int>("Length");

                            b1.Property<byte[]>("Payload");

                            b1.Property<string>("SHA2")
                                .IsRequired();

                            b1.Property<Guid>("StatementId");

                            b1.Property<string>("UsageType")
                                .IsRequired()
                                .HasMaxLength(2083);

                            b1.HasKey("AttachmentId");

                            b1.HasIndex("StatementId");

                            b1.ToTable("SubStatement_Attachments");

                            b1.HasOne("Doctrina.Domain.Entities.SubStatementEntity")
                                .WithMany("Attachments")
                                .HasForeignKey("StatementId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("Doctrina.Domain.Entities.StatementObjectEntity", "Object", b1 =>
                        {
                            b1.Property<Guid>("SubStatementId");

                            b1.Property<string>("ActivityHash");

                            b1.Property<string>("AgentHash");

                            b1.Property<int>("ObjectType");

                            b1.Property<Guid?>("StatementRefId");

                            b1.HasKey("SubStatementId");

                            b1.HasIndex("ActivityHash");

                            b1.HasIndex("AgentHash");

                            b1.HasIndex("StatementRefId");

                            b1.ToTable("SubStatements");

                            b1.HasOne("Doctrina.Domain.Entities.ActivityEntity", "Activity")
                                .WithMany()
                                .HasForeignKey("ActivityHash");

                            b1.HasOne("Doctrina.Domain.Entities.AgentEntity", "Agent")
                                .WithMany()
                                .HasForeignKey("AgentHash");

                            b1.HasOne("Doctrina.Domain.Entities.StatementRefEntity", "StatementRef")
                                .WithMany()
                                .HasForeignKey("StatementRefId");

                            b1.HasOne("Doctrina.Domain.Entities.SubStatementEntity", "SubStatement")
                                .WithOne("Object")
                                .HasForeignKey("Doctrina.Domain.Entities.StatementObjectEntity", "SubStatementId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
