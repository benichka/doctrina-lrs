// <auto-generated />
using System;
using Doctrina.Domain.Entities;
using Doctrina.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Doctrina.Persistence.Migrations
{
    [DbContext(typeof(DoctrinaDbContext))]
    [Migration("20191013181947_CreateDoctrinaSchema")]
    partial class CreateDoctrinaSchema
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Doctrina.Domain.Entities.Account", b =>
                {
                    b.Property<Guid>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("HomePage")
                        .HasColumnType("nvarchar(2083)")
                        .HasMaxLength(2083);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(40)")
                        .HasMaxLength(40);

                    b.HasKey("AccountId");

                    b.HasIndex("HomePage", "Name")
                        .IsUnique()
                        .HasFilter("[HomePage] IS NOT NULL AND [Name] IS NOT NULL");

                    b.ToTable("AgentAccounts");
                });

            modelBuilder.Entity("Doctrina.Domain.Entities.ActivityDefinitionEntity", b =>
                {
                    b.Property<Guid>("ActivityDefinitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Descriptions")
                        .HasColumnType("ntext");

                    b.Property<string>("Extensions")
                        .HasColumnType("ntext");

                    b.Property<Guid?>("InteractionActivityInteractionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MoreInfo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Names")
                        .HasColumnType("ntext");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ActivityDefinitionId");

                    b.HasIndex("InteractionActivityInteractionId");

                    b.ToTable("ActivityDefinitions");
                });

            modelBuilder.Entity("Doctrina.Domain.Entities.ActivityEntity", b =>
                {
                    b.Property<Guid>("ActivityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DefinitionActivityDefinitionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Hash")
                        .IsRequired()
                        .HasColumnType("nvarchar(32)")
                        .HasMaxLength(32);

                    b.Property<string>("Id")
                        .IsRequired()
                        .HasColumnType("nvarchar(2083)")
                        .HasMaxLength(2083);

                    b.HasKey("ActivityId");

                    b.HasIndex("DefinitionActivityDefinitionId");

                    b.HasIndex("Hash")
                        .IsUnique();

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("Activities");
                });

            modelBuilder.Entity("Doctrina.Domain.Entities.AgentEntity", b =>
                {
                    b.Property<Guid>("AgentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("GroupEntityAgentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Mbox")
                        .HasColumnName("Mbox")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Mbox_SHA1SUM")
                        .HasColumnName("Mbox_SHA1SUM")
                        .HasColumnType("nvarchar(40)")
                        .HasMaxLength(40);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int>("ObjectType")
                        .HasColumnType("int");

                    b.Property<string>("OpenId")
                        .HasColumnName("OpenId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("AgentId");

                    b.HasIndex("AccountId");

                    b.HasIndex("GroupEntityAgentId");

                    b.HasIndex("ObjectType", "Mbox")
                        .IsUnique()
                        .HasFilter("[Mbox] IS NOT NULL");

                    b.HasIndex("ObjectType", "Mbox_SHA1SUM")
                        .IsUnique()
                        .HasFilter("[Mbox_SHA1SUM] IS NOT NULL");

                    b.HasIndex("ObjectType", "OpenId")
                        .IsUnique()
                        .HasFilter("[OpenId] IS NOT NULL");

                    b.ToTable("Agents");

                    b.HasDiscriminator<int>("ObjectType").HasValue(1);
                });

            modelBuilder.Entity("Doctrina.Domain.Entities.AttachmentEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Description")
                        .HasColumnType("ntext");

                    b.Property<string>("Display")
                        .IsRequired()
                        .HasColumnType("ntext");

                    b.Property<string>("FileUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Length")
                        .HasColumnType("int");

                    b.Property<byte[]>("Payload")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("SHA2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("StatementEntityStatementId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SubStatementEntitySubStatementId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UsageType")
                        .IsRequired()
                        .HasColumnType("nvarchar(2083)")
                        .HasMaxLength(2083);

                    b.HasKey("Id");

                    b.HasIndex("StatementEntityStatementId");

                    b.HasIndex("SubStatementEntitySubStatementId");

                    b.ToTable("AttachmentEntity");
                });

            modelBuilder.Entity("Doctrina.Domain.Entities.ContextActivitiesEntity", b =>
                {
                    b.Property<Guid>("ContextActivitiesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Category")
                        .HasColumnType("ntext");

                    b.Property<string>("Grouping")
                        .HasColumnType("ntext");

                    b.Property<string>("Other")
                        .HasColumnType("ntext");

                    b.Property<string>("Parent")
                        .HasColumnType("ntext");

                    b.HasKey("ContextActivitiesId");

                    b.ToTable("ContextActivities");
                });

            modelBuilder.Entity("Doctrina.Domain.Entities.ContextEntity", b =>
                {
                    b.Property<Guid>("ContextId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ContextActivitiesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Extensions")
                        .HasColumnType("ntext");

                    b.Property<Guid?>("InstructorAgentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Language")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Platform")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("Registration")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Revision")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("TeamAgentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ContextId");

                    b.HasIndex("ContextActivitiesId");

                    b.HasIndex("InstructorAgentId");

                    b.HasIndex("TeamAgentId");

                    b.ToTable("Contexts");
                });

            modelBuilder.Entity("Doctrina.Domain.Entities.Documents.ActivityProfileEntity", b =>
                {
                    b.Property<Guid>("ActivityProfileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ActivityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProfileId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("RegistrationId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ActivityProfileId");

                    b.HasIndex("ActivityId");

                    b.ToTable("ActivityProfiles");
                });

            modelBuilder.Entity("Doctrina.Domain.Entities.Documents.ActivityStateEntity", b =>
                {
                    b.Property<Guid>("ActivityStateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ActivityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AgentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("Registration")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("StateId")
                        .IsRequired()
                        .HasColumnType("nvarchar(2083)")
                        .HasMaxLength(2083);

                    b.HasKey("ActivityStateId");

                    b.HasIndex("ActivityId");

                    b.HasIndex("AgentId");

                    b.ToTable("ActivityStates");
                });

            modelBuilder.Entity("Doctrina.Domain.Entities.Documents.AgentProfileEntity", b =>
                {
                    b.Property<Guid>("AgentProfileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AgentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProfileId")
                        .IsRequired()
                        .HasColumnType("nvarchar(2083)")
                        .HasMaxLength(2083);

                    b.HasKey("AgentProfileId");

                    b.HasIndex("AgentId");

                    b.HasIndex("ProfileId")
                        .IsUnique();

                    b.ToTable("AgentProfiles");
                });

            modelBuilder.Entity("Doctrina.Domain.Entities.InteractionActivities.InteractionActivityBase", b =>
                {
                    b.Property<Guid>("InteractionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CorrectResponsesPattern")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InteractionType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("InteractionId");

                    b.ToTable("InteractionActivities");

                    b.HasDiscriminator<string>("InteractionType").HasValue("InteractionActivityBase");
                });

            modelBuilder.Entity("Doctrina.Domain.Entities.ResultEntity", b =>
                {
                    b.Property<Guid>("ResultId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("Completion")
                        .HasColumnType("bit");

                    b.Property<string>("Duration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("DurationTicks")
                        .HasColumnType("bigint");

                    b.Property<string>("Extensions")
                        .HasColumnType("ntext");

                    b.Property<string>("Response")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Success")
                        .HasColumnType("bit");

                    b.HasKey("ResultId");

                    b.ToTable("Results");
                });

            modelBuilder.Entity("Doctrina.Domain.Entities.StatementEntity", b =>
                {
                    b.Property<Guid?>("StatementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ActorAgentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AuthorityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ContextId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FullStatement")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ResultId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("Stored")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("Timestamp")
                        .IsRequired()
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("VerbId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Version")
                        .HasColumnType("nvarchar(7)")
                        .HasMaxLength(7);

                    b.Property<bool>("Voided")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.HasKey("StatementId");

                    b.HasIndex("ActorAgentId");

                    b.HasIndex("AuthorityId");

                    b.HasIndex("ContextId");

                    b.HasIndex("ResultId");

                    b.HasIndex("VerbId");

                    b.ToTable("Statements");
                });

            modelBuilder.Entity("Doctrina.Domain.Entities.StatementRefEntity", b =>
                {
                    b.Property<Guid>("StatementRefId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("Id")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("StatementRefId");

                    b.HasIndex("Id");

                    b.ToTable("StatementRefEntity");
                });

            modelBuilder.Entity("Doctrina.Domain.Entities.SubStatementEntity", b =>
                {
                    b.Property<Guid>("SubStatementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ActorAgentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ContextId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ResultId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("Timestamp")
                        .IsRequired()
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("VerbId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SubStatementId");

                    b.HasIndex("ActorAgentId");

                    b.HasIndex("ContextId");

                    b.HasIndex("ResultId");

                    b.HasIndex("VerbId");

                    b.ToTable("SubStatements");
                });

            modelBuilder.Entity("Doctrina.Domain.Entities.VerbEntity", b =>
                {
                    b.Property<Guid>("VerbId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Display")
                        .HasColumnType("ntext");

                    b.Property<string>("Hash")
                        .IsRequired()
                        .HasColumnType("nvarchar(32)")
                        .HasMaxLength(32);

                    b.Property<string>("Id")
                        .IsRequired()
                        .HasColumnType("nvarchar(2083)")
                        .HasMaxLength(2083);

                    b.HasKey("VerbId");

                    b.HasIndex("Hash")
                        .IsUnique();

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("Verbs");
                });

            modelBuilder.Entity("Doctrina.Domain.Entities.GroupEntity", b =>
                {
                    b.HasBaseType("Doctrina.Domain.Entities.AgentEntity");

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("Doctrina.Domain.Entities.InteractionActivities.ChoiceInteractionActivity", b =>
                {
                    b.HasBaseType("Doctrina.Domain.Entities.InteractionActivities.InteractionActivityBase");

                    b.Property<string>("Choices")
                        .HasColumnType("ntext");

                    b.HasDiscriminator().HasValue("choice");
                });

            modelBuilder.Entity("Doctrina.Domain.Entities.InteractionActivities.FillInInteractionActivity", b =>
                {
                    b.HasBaseType("Doctrina.Domain.Entities.InteractionActivities.InteractionActivityBase");

                    b.HasDiscriminator().HasValue("fill-in");
                });

            modelBuilder.Entity("Doctrina.Domain.Entities.InteractionActivities.LikertInteractionActivity", b =>
                {
                    b.HasBaseType("Doctrina.Domain.Entities.InteractionActivities.InteractionActivityBase");

                    b.Property<string>("Scale")
                        .HasColumnType("ntext");

                    b.HasDiscriminator().HasValue("likert");
                });

            modelBuilder.Entity("Doctrina.Domain.Entities.InteractionActivities.LongFillInInteractionActivity", b =>
                {
                    b.HasBaseType("Doctrina.Domain.Entities.InteractionActivities.InteractionActivityBase");

                    b.HasDiscriminator().HasValue("long-fill-in");
                });

            modelBuilder.Entity("Doctrina.Domain.Entities.InteractionActivities.MatchingInteractionActivity", b =>
                {
                    b.HasBaseType("Doctrina.Domain.Entities.InteractionActivities.InteractionActivityBase");

                    b.Property<string>("Source")
                        .HasColumnType("ntext");

                    b.Property<string>("Target")
                        .HasColumnType("ntext");

                    b.HasDiscriminator().HasValue("matching");
                });

            modelBuilder.Entity("Doctrina.Domain.Entities.InteractionActivities.NumericInteractionType", b =>
                {
                    b.HasBaseType("Doctrina.Domain.Entities.InteractionActivities.InteractionActivityBase");

                    b.HasDiscriminator().HasValue("NumericInteractionType");
                });

            modelBuilder.Entity("Doctrina.Domain.Entities.InteractionActivities.OtherInteractionActivity", b =>
                {
                    b.HasBaseType("Doctrina.Domain.Entities.InteractionActivities.InteractionActivityBase");

                    b.HasDiscriminator().HasValue("other");
                });

            modelBuilder.Entity("Doctrina.Domain.Entities.InteractionActivities.PerformanceInteractionActivity", b =>
                {
                    b.HasBaseType("Doctrina.Domain.Entities.InteractionActivities.InteractionActivityBase");

                    b.Property<string>("Steps")
                        .HasColumnType("ntext");

                    b.HasDiscriminator().HasValue("performance");
                });

            modelBuilder.Entity("Doctrina.Domain.Entities.InteractionActivities.SequencingInteractionActivity", b =>
                {
                    b.HasBaseType("Doctrina.Domain.Entities.InteractionActivities.InteractionActivityBase");

                    b.Property<string>("Choices")
                        .HasColumnName("SequencingInteractionActivity_Choices")
                        .HasColumnType("ntext");

                    b.HasDiscriminator().HasValue("sequencing");
                });

            modelBuilder.Entity("Doctrina.Domain.Entities.InteractionActivities.TrueFalseInteractionActivity", b =>
                {
                    b.HasBaseType("Doctrina.Domain.Entities.InteractionActivities.InteractionActivityBase");

                    b.HasDiscriminator().HasValue("true-false");
                });

            modelBuilder.Entity("Doctrina.Domain.Entities.ActivityDefinitionEntity", b =>
                {
                    b.HasOne("Doctrina.Domain.Entities.InteractionActivities.InteractionActivityBase", "InteractionActivity")
                        .WithMany()
                        .HasForeignKey("InteractionActivityInteractionId");
                });

            modelBuilder.Entity("Doctrina.Domain.Entities.ActivityEntity", b =>
                {
                    b.HasOne("Doctrina.Domain.Entities.ActivityDefinitionEntity", "Definition")
                        .WithMany()
                        .HasForeignKey("DefinitionActivityDefinitionId");
                });

            modelBuilder.Entity("Doctrina.Domain.Entities.AgentEntity", b =>
                {
                    b.HasOne("Doctrina.Domain.Entities.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId");

                    b.HasOne("Doctrina.Domain.Entities.GroupEntity", null)
                        .WithMany("Members")
                        .HasForeignKey("GroupEntityAgentId");
                });

            modelBuilder.Entity("Doctrina.Domain.Entities.AttachmentEntity", b =>
                {
                    b.HasOne("Doctrina.Domain.Entities.StatementEntity", null)
                        .WithMany("Attachments")
                        .HasForeignKey("StatementEntityStatementId");

                    b.HasOne("Doctrina.Domain.Entities.SubStatementEntity", null)
                        .WithMany("Attachments")
                        .HasForeignKey("SubStatementEntitySubStatementId");
                });

            modelBuilder.Entity("Doctrina.Domain.Entities.ContextEntity", b =>
                {
                    b.HasOne("Doctrina.Domain.Entities.ContextActivitiesEntity", "ContextActivities")
                        .WithMany()
                        .HasForeignKey("ContextActivitiesId");

                    b.HasOne("Doctrina.Domain.Entities.AgentEntity", "Instructor")
                        .WithMany()
                        .HasForeignKey("InstructorAgentId");

                    b.HasOne("Doctrina.Domain.Entities.AgentEntity", "Team")
                        .WithMany()
                        .HasForeignKey("TeamAgentId");
                });

            modelBuilder.Entity("Doctrina.Domain.Entities.Documents.ActivityProfileEntity", b =>
                {
                    b.HasOne("Doctrina.Domain.Entities.ActivityEntity", "Activity")
                        .WithMany()
                        .HasForeignKey("ActivityId");

                    b.OwnsOne("Doctrina.Domain.Entities.Documents.DocumentEntity", "Document", b1 =>
                        {
                            b1.Property<Guid>("ActivityProfileEntityActivityProfileId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Checksum")
                                .IsRequired()
                                .HasColumnType("nvarchar(50)")
                                .HasMaxLength(50);

                            b1.Property<byte[]>("Content")
                                .HasColumnType("varbinary(max)");

                            b1.Property<string>("ContentType")
                                .HasColumnType("nvarchar(255)")
                                .HasMaxLength(255);

                            b1.Property<DateTimeOffset>("CreateDate")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("datetimeoffset");

                            b1.Property<DateTimeOffset?>("LastModified")
                                .IsRequired()
                                .ValueGeneratedOnAddOrUpdate()
                                .HasColumnType("datetimeoffset")
                                .HasDefaultValue(new DateTimeOffset(new DateTime(2019, 10, 13, 18, 19, 47, 18, DateTimeKind.Unspecified).AddTicks(2782), new TimeSpan(0, 0, 0, 0, 0)));

                            b1.HasKey("ActivityProfileEntityActivityProfileId");

                            b1.ToTable("ActivityProfiles");

                            b1.WithOwner()
                                .HasForeignKey("ActivityProfileEntityActivityProfileId");
                        });
                });

            modelBuilder.Entity("Doctrina.Domain.Entities.Documents.ActivityStateEntity", b =>
                {
                    b.HasOne("Doctrina.Domain.Entities.ActivityEntity", "Activity")
                        .WithMany()
                        .HasForeignKey("ActivityId");

                    b.HasOne("Doctrina.Domain.Entities.AgentEntity", "Agent")
                        .WithMany()
                        .HasForeignKey("AgentId");

                    b.OwnsOne("Doctrina.Domain.Entities.Documents.DocumentEntity", "Document", b1 =>
                        {
                            b1.Property<Guid>("ActivityStateEntityActivityStateId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Checksum")
                                .IsRequired()
                                .HasColumnType("nvarchar(50)")
                                .HasMaxLength(50);

                            b1.Property<byte[]>("Content")
                                .HasColumnType("varbinary(max)");

                            b1.Property<string>("ContentType")
                                .HasColumnType("nvarchar(255)")
                                .HasMaxLength(255);

                            b1.Property<DateTimeOffset>("CreateDate")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("datetimeoffset");

                            b1.Property<DateTimeOffset?>("LastModified")
                                .IsRequired()
                                .ValueGeneratedOnAddOrUpdate()
                                .HasColumnType("datetimeoffset")
                                .HasDefaultValue(new DateTimeOffset(new DateTime(2019, 10, 13, 18, 19, 47, 26, DateTimeKind.Unspecified).AddTicks(952), new TimeSpan(0, 0, 0, 0, 0)));

                            b1.HasKey("ActivityStateEntityActivityStateId");

                            b1.ToTable("ActivityStates");

                            b1.WithOwner()
                                .HasForeignKey("ActivityStateEntityActivityStateId");
                        });
                });

            modelBuilder.Entity("Doctrina.Domain.Entities.Documents.AgentProfileEntity", b =>
                {
                    b.HasOne("Doctrina.Domain.Entities.AgentEntity", "Agent")
                        .WithMany()
                        .HasForeignKey("AgentId");

                    b.OwnsOne("Doctrina.Domain.Entities.Documents.DocumentEntity", "Document", b1 =>
                        {
                            b1.Property<Guid>("AgentProfileEntityAgentProfileId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Checksum")
                                .IsRequired()
                                .HasColumnType("nvarchar(50)")
                                .HasMaxLength(50);

                            b1.Property<byte[]>("Content")
                                .HasColumnType("varbinary(max)");

                            b1.Property<string>("ContentType")
                                .HasColumnType("nvarchar(255)")
                                .HasMaxLength(255);

                            b1.Property<DateTimeOffset>("CreateDate")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("datetimeoffset");

                            b1.Property<DateTimeOffset?>("LastModified")
                                .IsRequired()
                                .ValueGeneratedOnAddOrUpdate()
                                .HasColumnType("datetimeoffset")
                                .HasDefaultValue(new DateTimeOffset(new DateTime(2019, 10, 13, 18, 19, 47, 30, DateTimeKind.Unspecified).AddTicks(8770), new TimeSpan(0, 0, 0, 0, 0)));

                            b1.HasKey("AgentProfileEntityAgentProfileId");

                            b1.ToTable("AgentProfiles");

                            b1.WithOwner()
                                .HasForeignKey("AgentProfileEntityAgentProfileId");
                        });
                });

            modelBuilder.Entity("Doctrina.Domain.Entities.ResultEntity", b =>
                {
                    b.OwnsOne("Doctrina.Domain.Entities.ScoreEntity", "Score", b1 =>
                        {
                            b1.Property<Guid>("ResultEntityResultId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<double?>("Max")
                                .HasColumnType("float");

                            b1.Property<double?>("Min")
                                .HasColumnType("float");

                            b1.Property<double?>("Raw")
                                .HasColumnType("float");

                            b1.Property<double?>("Scaled")
                                .HasColumnType("float");

                            b1.HasKey("ResultEntityResultId");

                            b1.ToTable("Results");

                            b1.WithOwner()
                                .HasForeignKey("ResultEntityResultId");
                        });
                });

            modelBuilder.Entity("Doctrina.Domain.Entities.StatementEntity", b =>
                {
                    b.HasOne("Doctrina.Domain.Entities.AgentEntity", "Actor")
                        .WithMany()
                        .HasForeignKey("ActorAgentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Doctrina.Domain.Entities.AgentEntity", "Authority")
                        .WithMany()
                        .HasForeignKey("AuthorityId");

                    b.HasOne("Doctrina.Domain.Entities.ContextEntity", "Context")
                        .WithMany()
                        .HasForeignKey("ContextId");

                    b.HasOne("Doctrina.Domain.Entities.ResultEntity", "Result")
                        .WithMany()
                        .HasForeignKey("ResultId");

                    b.HasOne("Doctrina.Domain.Entities.VerbEntity", "Verb")
                        .WithMany()
                        .HasForeignKey("VerbId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Doctrina.Domain.Entities.StatementObjectEntity", "Object", b1 =>
                        {
                            b1.Property<Guid>("StatementEntityStatementId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid?>("ActivityId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid?>("AgentId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("ObjectType")
                                .HasColumnType("int");

                            b1.Property<Guid?>("StatementRefId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid?>("SubStatementId")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("StatementEntityStatementId");

                            b1.HasIndex("ActivityId");

                            b1.HasIndex("AgentId");

                            b1.HasIndex("StatementRefId");

                            b1.HasIndex("SubStatementId");

                            b1.ToTable("Statements");

                            b1.HasOne("Doctrina.Domain.Entities.ActivityEntity", "Activity")
                                .WithMany()
                                .HasForeignKey("ActivityId");

                            b1.HasOne("Doctrina.Domain.Entities.AgentEntity", "Agent")
                                .WithMany()
                                .HasForeignKey("AgentId");

                            b1.WithOwner()
                                .HasForeignKey("StatementEntityStatementId");

                            b1.HasOne("Doctrina.Domain.Entities.StatementRefEntity", "StatementRef")
                                .WithMany()
                                .HasForeignKey("StatementRefId");

                            b1.HasOne("Doctrina.Domain.Entities.SubStatementEntity", "SubStatement")
                                .WithMany()
                                .HasForeignKey("SubStatementId");
                        });
                });

            modelBuilder.Entity("Doctrina.Domain.Entities.SubStatementEntity", b =>
                {
                    b.HasOne("Doctrina.Domain.Entities.AgentEntity", "Actor")
                        .WithMany()
                        .HasForeignKey("ActorAgentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Doctrina.Domain.Entities.ContextEntity", "Context")
                        .WithMany()
                        .HasForeignKey("ContextId");

                    b.HasOne("Doctrina.Domain.Entities.ResultEntity", "Result")
                        .WithMany()
                        .HasForeignKey("ResultId");

                    b.HasOne("Doctrina.Domain.Entities.VerbEntity", "Verb")
                        .WithMany()
                        .HasForeignKey("VerbId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Doctrina.Domain.Entities.StatementObjectEntity", "Object", b1 =>
                        {
                            b1.Property<Guid>("SubStatementId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid?>("ActivityId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid?>("AgentId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("ObjectType")
                                .HasColumnType("int");

                            b1.Property<Guid?>("StatementRefId")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("SubStatementId");

                            b1.HasIndex("ActivityId");

                            b1.HasIndex("AgentId");

                            b1.HasIndex("StatementRefId");

                            b1.ToTable("SubStatements");

                            b1.HasOne("Doctrina.Domain.Entities.ActivityEntity", "Activity")
                                .WithMany()
                                .HasForeignKey("ActivityId");

                            b1.HasOne("Doctrina.Domain.Entities.AgentEntity", "Agent")
                                .WithMany()
                                .HasForeignKey("AgentId");

                            b1.HasOne("Doctrina.Domain.Entities.StatementRefEntity", "StatementRef")
                                .WithMany()
                                .HasForeignKey("StatementRefId");

                            b1.WithOwner("SubStatement")
                                .HasForeignKey("SubStatementId");
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
