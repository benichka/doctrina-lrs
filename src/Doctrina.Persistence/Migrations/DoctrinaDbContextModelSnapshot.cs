// <auto-generated />
using System;
using Doctrina.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Doctrina.Persistence.Migrations
{
    [DbContext(typeof(DoctrinaDbContext))]
    partial class DoctrinaDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Doctrina.Domain.Entities.ActivityDefinitionEntity", b =>
                {
                    b.Property<Guid>("ActivityDefinitionId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ActivityHash");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("MoreInfo");

                    b.Property<string>("Type");

                    b.HasKey("ActivityDefinitionId");

                    b.HasIndex("ActivityHash")
                        .IsUnique()
                        .HasFilter("[ActivityHash] IS NOT NULL");

                    b.ToTable("ActivityDefinitions");

                    b.HasDiscriminator<string>("Discriminator").HasValue("ActivityDefinitionEntity");
                });

            modelBuilder.Entity("Doctrina.Domain.Entities.ActivityEntity", b =>
                {
                    b.Property<string>("ActivityHash")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(32);

                    b.Property<string>("ActivityId")
                        .IsRequired()
                        .HasMaxLength(2083);

                    b.HasKey("ActivityHash");

                    b.ToTable("Activities");
                });

            modelBuilder.Entity("Doctrina.Domain.Entities.AgentEntity", b =>
                {
                    b.Property<string>("AgentHash")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("GroupEntityAgentHash");

                    b.Property<string>("Mbox")
                        .HasMaxLength(128);

                    b.Property<string>("Mbox_SHA1SUM")
                        .HasMaxLength(40);

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.Property<int>("ObjectType")
                        .HasMaxLength(12);

                    b.Property<string>("OpenId");

                    b.HasKey("AgentHash");

                    b.HasIndex("GroupEntityAgentHash");

                    b.HasIndex("ObjectType", "AgentHash")
                        .IsUnique();

                    b.HasIndex("ObjectType", "Mbox")
                        .IsUnique()
                        .HasFilter("[Mbox] IS NOT NULL");

                    b.HasIndex("ObjectType", "Mbox_SHA1SUM")
                        .IsUnique()
                        .HasFilter("[Mbox_SHA1SUM] IS NOT NULL");

                    b.HasIndex("ObjectType", "OpenId")
                        .IsUnique()
                        .HasFilter("[OpenId] IS NOT NULL");

                    b.ToTable("Agents");

                    b.HasDiscriminator<string>("Discriminator").HasValue("AgentEntity");
                });

            modelBuilder.Entity("Doctrina.Domain.Entities.AttachmentEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CanonicalData")
                        .HasColumnType("ntext");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("FileUrl");

                    b.Property<long>("Length");

                    b.Property<byte[]>("Payload");

                    b.Property<string>("SHA2")
                        .IsRequired();

                    b.Property<Guid>("StatementId");

                    b.Property<string>("UsageType")
                        .IsRequired()
                        .HasMaxLength(2083);

                    b.HasKey("Id");

                    b.HasIndex("StatementId");

                    b.ToTable("Attachments");
                });

            modelBuilder.Entity("Doctrina.Domain.Entities.ContextActivitiesEntity", b =>
                {
                    b.Property<Guid>("ContextActivitiesId")
                        .ValueGeneratedOnAdd();

                    b.HasKey("ContextActivitiesId");

                    b.ToTable("ContextActivities");
                });

            modelBuilder.Entity("Doctrina.Domain.Entities.ContextActivityTypeEntity", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ActivityId");

                    b.Property<Guid?>("ContextActivitiesEntityContextActivitiesId");

                    b.Property<Guid?>("ContextActivitiesEntityContextActivitiesId1");

                    b.Property<Guid?>("ContextActivitiesEntityContextActivitiesId2");

                    b.Property<Guid?>("ContextActivitiesEntityContextActivitiesId3");

                    b.HasKey("Id");

                    b.HasIndex("ContextActivitiesEntityContextActivitiesId");

                    b.HasIndex("ContextActivitiesEntityContextActivitiesId1");

                    b.HasIndex("ContextActivitiesEntityContextActivitiesId2");

                    b.HasIndex("ContextActivitiesEntityContextActivitiesId3");

                    b.ToTable("ContextActivityTypeEntity");
                });

            modelBuilder.Entity("Doctrina.Domain.Entities.ContextEntity", b =>
                {
                    b.Property<Guid>("ContextId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("ContextActivitiesId");

                    b.Property<string>("Extensions")
                        .HasColumnType("ntext");

                    b.Property<string>("InstructorAgentHash");

                    b.Property<string>("Language");

                    b.Property<string>("Platform");

                    b.Property<Guid?>("Registration");

                    b.Property<string>("Revision");

                    b.Property<Guid?>("StatementId");

                    b.Property<string>("TeamAgentHash");

                    b.HasKey("ContextId");

                    b.HasIndex("ContextActivitiesId");

                    b.HasIndex("InstructorAgentHash");

                    b.HasIndex("StatementId")
                        .IsUnique()
                        .HasFilter("[StatementId] IS NOT NULL");

                    b.HasIndex("TeamAgentHash");

                    b.ToTable("Context");
                });

            modelBuilder.Entity("Doctrina.Domain.Entities.Documents.DocumentBaseEntity", b =>
                {
                    b.Property<Guid>("Key")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Checksum")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<byte[]>("Content");

                    b.Property<string>("ContentType")
                        .HasMaxLength(255);

                    b.Property<DateTimeOffset>("CreateDate")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<DateTimeOffset?>("LastModified")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2019, 5, 17, 13, 54, 59, 545, DateTimeKind.Unspecified).AddTicks(2852), new TimeSpan(0, 0, 0, 0, 0)));

                    b.HasKey("Key");

                    b.ToTable("Documents");

                    b.HasDiscriminator<string>("Discriminator").HasValue("DocumentBaseEntity");
                });

            modelBuilder.Entity("Doctrina.Domain.Entities.ResultEntity", b =>
                {
                    b.Property<Guid>("ResultId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool?>("Completion");

                    b.Property<string>("Duration");

                    b.Property<long?>("DurationTicks");

                    b.Property<string>("Response");

                    b.Property<Guid>("StatementId");

                    b.Property<bool?>("Success");

                    b.HasKey("ResultId");

                    b.HasIndex("StatementId")
                        .IsUnique();

                    b.ToTable("Results");
                });

            modelBuilder.Entity("Doctrina.Domain.Entities.StatementBaseEntity", b =>
                {
                    b.Property<Guid>("StatementId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ActorAgentHash")
                        .IsRequired();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("ObjectActivityActivityHash");

                    b.Property<string>("ObjectAgentAgentHash");

                    b.Property<string>("ObjectObjectType")
                        .IsRequired()
                        .HasColumnType("nvarchar(12)");

                    b.Property<Guid?>("ObjectStatementRefId");

                    b.Property<DateTimeOffset>("Timestamp");

                    b.Property<string>("VerbHash")
                        .IsRequired();

                    b.HasKey("StatementId");

                    b.HasIndex("ActorAgentHash");

                    b.HasIndex("ObjectActivityActivityHash");

                    b.HasIndex("ObjectAgentAgentHash");

                    b.HasIndex("VerbHash");

                    b.ToTable("StatementBase");

                    b.HasDiscriminator<string>("Discriminator").HasValue("StatementBaseEntity");
                });

            modelBuilder.Entity("Doctrina.Domain.Entities.VerbEntity", b =>
                {
                    b.Property<string>("VerbHash")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(32);

                    b.Property<string>("Id")
                        .IsRequired()
                        .HasMaxLength(2083);

                    b.HasKey("VerbHash");

                    b.ToTable("Verbs");
                });

            modelBuilder.Entity("Doctrina.Domain.Entities.Interactions.AbstractInteractionType", b =>
                {
                    b.HasBaseType("Doctrina.Domain.Entities.ActivityDefinitionEntity");

                    b.Property<string>("CorrectResponsesPattern");

                    b.Property<int>("InteractionId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("InteractionType")
                        .IsRequired()
                        .HasMaxLength(12);

                    b.ToTable("InteractionActivities");

                    b.HasDiscriminator().HasValue("AbstractInteractionType");
                });

            modelBuilder.Entity("Doctrina.Domain.Entities.GroupEntity", b =>
                {
                    b.HasBaseType("Doctrina.Domain.Entities.AgentEntity");

                    b.HasDiscriminator().HasValue("GroupEntity");
                });

            modelBuilder.Entity("Doctrina.Domain.Entities.Documents.ActivityProfileEntity", b =>
                {
                    b.HasBaseType("Doctrina.Domain.Entities.Documents.DocumentBaseEntity");

                    b.Property<string>("ActivityHash");

                    b.Property<string>("ProfileId")
                        .IsRequired();

                    b.Property<Guid?>("RegistrationId");

                    b.HasIndex("ActivityHash");

                    b.HasIndex("ProfileId", "ActivityHash")
                        .IsUnique()
                        .HasFilter("[ProfileId] IS NOT NULL AND [ActivityHash] IS NOT NULL");

                    b.HasDiscriminator().HasValue("ActivityProfileEntity");
                });

            modelBuilder.Entity("Doctrina.Domain.Entities.Documents.ActivityStateEntity", b =>
                {
                    b.HasBaseType("Doctrina.Domain.Entities.Documents.DocumentBaseEntity");

                    b.Property<string>("ActivityHash")
                        .HasColumnName("ActivityStateEntity_ActivityHash");

                    b.Property<string>("AgentHash");

                    b.Property<Guid?>("Registration");

                    b.Property<string>("StateId")
                        .IsRequired()
                        .HasMaxLength(2083);

                    b.HasIndex("ActivityHash");

                    b.HasIndex("AgentHash");

                    b.HasIndex("StateId", "AgentHash", "ActivityHash", "Registration")
                        .IsUnique()
                        .HasFilter("[StateId] IS NOT NULL AND [AgentHash] IS NOT NULL AND [ActivityStateEntity_ActivityHash] IS NOT NULL AND [Registration] IS NOT NULL");

                    b.HasDiscriminator().HasValue("ActivityStateEntity");
                });

            modelBuilder.Entity("Doctrina.Domain.Entities.Documents.AgentProfileEntity", b =>
                {
                    b.HasBaseType("Doctrina.Domain.Entities.Documents.DocumentBaseEntity");

                    b.Property<string>("AgentHash")
                        .HasColumnName("AgentProfileEntity_AgentHash");

                    b.Property<string>("ProfileId")
                        .IsRequired()
                        .HasColumnName("AgentProfileEntity_ProfileId")
                        .HasMaxLength(2083);

                    b.HasIndex("AgentHash");

                    b.HasIndex("ProfileId")
                        .IsUnique()
                        .HasFilter("[AgentProfileEntity_ProfileId] IS NOT NULL");

                    b.HasIndex("ProfileId", "AgentHash")
                        .IsUnique()
                        .HasFilter("[AgentProfileEntity_ProfileId] IS NOT NULL AND [AgentProfileEntity_AgentHash] IS NOT NULL");

                    b.HasDiscriminator().HasValue("AgentProfileEntity");
                });

            modelBuilder.Entity("Doctrina.Domain.Entities.StatementEntity", b =>
                {
                    b.HasBaseType("Doctrina.Domain.Entities.StatementBaseEntity");

                    b.Property<string>("AuthorityAgentHash");

                    b.Property<Guid?>("AuthorityId");

                    b.Property<string>("FullStatement");

                    b.Property<Guid?>("ObjectSubStatementId");

                    b.Property<DateTimeOffset>("Stored")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Version")
                        .HasMaxLength(7);

                    b.Property<bool>("Voided")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.HasIndex("AuthorityAgentHash");

                    b.HasIndex("ObjectSubStatementId")
                        .IsUnique()
                        .HasFilter("[ObjectSubStatementId] IS NOT NULL");

                    b.HasDiscriminator().HasValue("StatementEntity");
                });

            modelBuilder.Entity("Doctrina.Domain.Entities.SubStatementEntity", b =>
                {
                    b.HasBaseType("Doctrina.Domain.Entities.StatementBaseEntity");

                    b.Property<int>("ObjectType");

                    b.Property<Guid>("SubStatementId");

                    b.HasDiscriminator().HasValue("SubStatementEntity");
                });

            modelBuilder.Entity("Doctrina.Domain.Entities.Interactions.ChoiceInteractionType", b =>
                {
                    b.HasBaseType("Doctrina.Domain.Entities.Interactions.AbstractInteractionType");

                    b.HasDiscriminator().HasValue("ChoiceInteractionType");
                });

            modelBuilder.Entity("Doctrina.Domain.Entities.Interactions.FillInInteractionType", b =>
                {
                    b.HasBaseType("Doctrina.Domain.Entities.Interactions.AbstractInteractionType");

                    b.HasDiscriminator().HasValue("FillInInteractionType");
                });

            modelBuilder.Entity("Doctrina.Domain.Entities.Interactions.LikertInteractionType", b =>
                {
                    b.HasBaseType("Doctrina.Domain.Entities.Interactions.AbstractInteractionType");

                    b.HasDiscriminator().HasValue("LikertInteractionType");
                });

            modelBuilder.Entity("Doctrina.Domain.Entities.Interactions.LongFillInInteractionType", b =>
                {
                    b.HasBaseType("Doctrina.Domain.Entities.Interactions.AbstractInteractionType");

                    b.HasDiscriminator().HasValue("LongFillInInteractionType");
                });

            modelBuilder.Entity("Doctrina.Domain.Entities.Interactions.MatchingInteractionType", b =>
                {
                    b.HasBaseType("Doctrina.Domain.Entities.Interactions.AbstractInteractionType");

                    b.HasDiscriminator().HasValue("MatchingInteractionType");
                });

            modelBuilder.Entity("Doctrina.Domain.Entities.Interactions.NumericInteractionType", b =>
                {
                    b.HasBaseType("Doctrina.Domain.Entities.Interactions.AbstractInteractionType");

                    b.HasDiscriminator().HasValue("NumericInteractionType");
                });

            modelBuilder.Entity("Doctrina.Domain.Entities.Interactions.OtherInteractionType", b =>
                {
                    b.HasBaseType("Doctrina.Domain.Entities.Interactions.AbstractInteractionType");

                    b.HasDiscriminator().HasValue("OtherInteractionType");
                });

            modelBuilder.Entity("Doctrina.Domain.Entities.Interactions.PerformanceInteractionType", b =>
                {
                    b.HasBaseType("Doctrina.Domain.Entities.Interactions.AbstractInteractionType");

                    b.HasDiscriminator().HasValue("PerformanceInteractionType");
                });

            modelBuilder.Entity("Doctrina.Domain.Entities.Interactions.SequencingInteractionType", b =>
                {
                    b.HasBaseType("Doctrina.Domain.Entities.Interactions.AbstractInteractionType");

                    b.HasDiscriminator().HasValue("SequencingInteractionType");
                });

            modelBuilder.Entity("Doctrina.Domain.Entities.ActivityDefinitionEntity", b =>
                {
                    b.HasOne("Doctrina.Domain.Entities.ActivityEntity", "Activity")
                        .WithOne("Definition")
                        .HasForeignKey("Doctrina.Domain.Entities.ActivityDefinitionEntity", "ActivityHash");

                    b.OwnsMany("Doctrina.Domain.Entities.OwnedTypes.ExtensionEntity", "Extensions", b1 =>
                        {
                            b1.Property<Guid>("ExtensionId")
                                .ValueGeneratedOnAdd();

                            b1.Property<Guid>("ActivityDefinitionId");

                            b1.Property<string>("Key");

                            b1.Property<string>("Value");

                            b1.HasKey("ExtensionId");

                            b1.HasIndex("ActivityDefinitionId");

                            b1.ToTable("ActivityDefinitions_Extensions");

                            b1.HasOne("Doctrina.Domain.Entities.ActivityDefinitionEntity")
                                .WithMany("Extensions")
                                .HasForeignKey("ActivityDefinitionId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsMany("Doctrina.Domain.Entities.OwnedTypes.LanguageMapEntity", "Descriptions", b1 =>
                        {
                            b1.Property<Guid>("DescriptionId")
                                .ValueGeneratedOnAdd();

                            b1.Property<Guid>("ActivityDefinitionId");

                            b1.Property<string>("Description");

                            b1.Property<string>("LanguageCode");

                            b1.HasKey("DescriptionId");

                            b1.HasIndex("ActivityDefinitionId");

                            b1.ToTable("ActivityDefinitions_Descriptions");

                            b1.HasOne("Doctrina.Domain.Entities.ActivityDefinitionEntity")
                                .WithMany("Descriptions")
                                .HasForeignKey("ActivityDefinitionId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsMany("Doctrina.Domain.Entities.OwnedTypes.LanguageMapEntity", "Names", b1 =>
                        {
                            b1.Property<Guid>("NameId")
                                .ValueGeneratedOnAdd();

                            b1.Property<Guid>("ActivityDefinitionId");

                            b1.Property<string>("Description");

                            b1.Property<string>("LanguageCode");

                            b1.HasKey("NameId");

                            b1.HasIndex("ActivityDefinitionId");

                            b1.ToTable("ActivityDefinitions_Names");

                            b1.HasOne("Doctrina.Domain.Entities.ActivityDefinitionEntity")
                                .WithMany("Names")
                                .HasForeignKey("ActivityDefinitionId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("Doctrina.Domain.Entities.AgentEntity", b =>
                {
                    b.HasOne("Doctrina.Domain.Entities.GroupEntity")
                        .WithMany("Members")
                        .HasForeignKey("GroupEntityAgentHash");

                    b.OwnsOne("Doctrina.Domain.Entities.Account", "Account", b1 =>
                        {
                            b1.Property<string>("AgentEntityAgentHash");

                            b1.Property<string>("HomePage")
                                .HasColumnName("Account_HomePage")
                                .HasMaxLength(2083);

                            b1.Property<string>("Name")
                                .HasColumnName("Account_Name")
                                .HasMaxLength(40);

                            b1.HasKey("AgentEntityAgentHash");

                            b1.HasIndex("HomePage", "Name")
                                .IsUnique()
                                .HasFilter("[Account_HomePage] IS NOT NULL AND [Account_Name] IS NOT NULL");

                            b1.ToTable("Agents");

                            b1.HasOne("Doctrina.Domain.Entities.AgentEntity")
                                .WithOne("Account")
                                .HasForeignKey("Doctrina.Domain.Entities.Account", "AgentEntityAgentHash")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("Doctrina.Domain.Entities.AttachmentEntity", b =>
                {
                    b.HasOne("Doctrina.Domain.Entities.StatementBaseEntity", "Statement")
                        .WithMany("Attachments")
                        .HasForeignKey("StatementId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Doctrina.Domain.Entities.ContextActivityTypeEntity", b =>
                {
                    b.HasOne("Doctrina.Domain.Entities.ContextActivitiesEntity")
                        .WithMany("Category")
                        .HasForeignKey("ContextActivitiesEntityContextActivitiesId");

                    b.HasOne("Doctrina.Domain.Entities.ContextActivitiesEntity")
                        .WithMany("Grouping")
                        .HasForeignKey("ContextActivitiesEntityContextActivitiesId1");

                    b.HasOne("Doctrina.Domain.Entities.ContextActivitiesEntity")
                        .WithMany("Other")
                        .HasForeignKey("ContextActivitiesEntityContextActivitiesId2");

                    b.HasOne("Doctrina.Domain.Entities.ContextActivitiesEntity")
                        .WithMany("Parent")
                        .HasForeignKey("ContextActivitiesEntityContextActivitiesId3");
                });

            modelBuilder.Entity("Doctrina.Domain.Entities.ContextEntity", b =>
                {
                    b.HasOne("Doctrina.Domain.Entities.ContextActivitiesEntity", "ContextActivities")
                        .WithMany()
                        .HasForeignKey("ContextActivitiesId");

                    b.HasOne("Doctrina.Domain.Entities.AgentEntity", "Instructor")
                        .WithMany()
                        .HasForeignKey("InstructorAgentHash");

                    b.HasOne("Doctrina.Domain.Entities.StatementBaseEntity")
                        .WithOne("Context")
                        .HasForeignKey("Doctrina.Domain.Entities.ContextEntity", "StatementId");

                    b.HasOne("Doctrina.Domain.Entities.AgentEntity", "Team")
                        .WithMany()
                        .HasForeignKey("TeamAgentHash");
                });

            modelBuilder.Entity("Doctrina.Domain.Entities.ResultEntity", b =>
                {
                    b.HasOne("Doctrina.Domain.Entities.StatementBaseEntity", "Statement")
                        .WithOne("Result")
                        .HasForeignKey("Doctrina.Domain.Entities.ResultEntity", "StatementId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("Doctrina.Domain.Entities.ScoreEntity", "Score", b1 =>
                        {
                            b1.Property<Guid>("ScoreId")
                                .ValueGeneratedOnAdd();

                            b1.Property<double?>("Max");

                            b1.Property<double?>("Min");

                            b1.Property<double?>("Raw");

                            b1.Property<Guid>("ResultId");

                            b1.Property<double?>("Scaled");

                            b1.HasKey("ScoreId");

                            b1.HasIndex("ResultId")
                                .IsUnique();

                            b1.ToTable("Result_Scores");

                            b1.HasOne("Doctrina.Domain.Entities.ResultEntity")
                                .WithOne("Score")
                                .HasForeignKey("Doctrina.Domain.Entities.ScoreEntity", "ResultId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsMany("Doctrina.Domain.Entities.OwnedTypes.ExtensionEntity", "Extensions", b1 =>
                        {
                            b1.Property<Guid>("ExtensionId")
                                .ValueGeneratedOnAdd();

                            b1.Property<string>("Key");

                            b1.Property<Guid>("ResultId");

                            b1.Property<string>("Value");

                            b1.HasKey("ExtensionId");

                            b1.HasIndex("ResultId");

                            b1.ToTable("Results_Extensions");

                            b1.HasOne("Doctrina.Domain.Entities.ResultEntity")
                                .WithMany("Extensions")
                                .HasForeignKey("ResultId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("Doctrina.Domain.Entities.StatementBaseEntity", b =>
                {
                    b.HasOne("Doctrina.Domain.Entities.AgentEntity", "Actor")
                        .WithMany()
                        .HasForeignKey("ActorAgentHash")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Doctrina.Domain.Entities.ActivityEntity", "ObjectActivity")
                        .WithMany()
                        .HasForeignKey("ObjectActivityActivityHash");

                    b.HasOne("Doctrina.Domain.Entities.AgentEntity", "ObjectAgent")
                        .WithMany()
                        .HasForeignKey("ObjectAgentAgentHash");

                    b.HasOne("Doctrina.Domain.Entities.VerbEntity", "Verb")
                        .WithMany()
                        .HasForeignKey("VerbHash")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Doctrina.Domain.Entities.VerbEntity", b =>
                {
                    b.OwnsMany("Doctrina.Domain.Entities.OwnedTypes.LanguageMapEntity", "Display", b1 =>
                        {
                            b1.Property<Guid>("DisplayId")
                                .ValueGeneratedOnAdd();

                            b1.Property<string>("Description");

                            b1.Property<string>("LanguageCode");

                            b1.Property<string>("VerbHash")
                                .IsRequired();

                            b1.HasKey("DisplayId");

                            b1.HasIndex("VerbHash");

                            b1.ToTable("Verbs_Display");

                            b1.HasOne("Doctrina.Domain.Entities.VerbEntity")
                                .WithMany("Display")
                                .HasForeignKey("VerbHash")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("Doctrina.Domain.Entities.Documents.ActivityProfileEntity", b =>
                {
                    b.HasOne("Doctrina.Domain.Entities.ActivityEntity", "Activity")
                        .WithMany()
                        .HasForeignKey("ActivityHash");
                });

            modelBuilder.Entity("Doctrina.Domain.Entities.Documents.ActivityStateEntity", b =>
                {
                    b.HasOne("Doctrina.Domain.Entities.ActivityEntity", "Activity")
                        .WithMany()
                        .HasForeignKey("ActivityHash");

                    b.HasOne("Doctrina.Domain.Entities.AgentEntity", "Agent")
                        .WithMany()
                        .HasForeignKey("AgentHash");
                });

            modelBuilder.Entity("Doctrina.Domain.Entities.Documents.AgentProfileEntity", b =>
                {
                    b.HasOne("Doctrina.Domain.Entities.AgentEntity", "Agent")
                        .WithMany()
                        .HasForeignKey("AgentHash");
                });

            modelBuilder.Entity("Doctrina.Domain.Entities.StatementEntity", b =>
                {
                    b.HasOne("Doctrina.Domain.Entities.AgentEntity", "Authority")
                        .WithMany()
                        .HasForeignKey("AuthorityAgentHash");

                    b.HasOne("Doctrina.Domain.Entities.SubStatementEntity", "ObjectSubStatement")
                        .WithOne()
                        .HasForeignKey("Doctrina.Domain.Entities.StatementEntity", "ObjectSubStatementId");
                });

            modelBuilder.Entity("Doctrina.Domain.Entities.Interactions.ChoiceInteractionType", b =>
                {
                    b.OwnsMany("Doctrina.Domain.Entities.Interactions.InteractionComponent", "Choices", b1 =>
                        {
                            b1.Property<string>("Id")
                                .ValueGeneratedOnAdd();

                            b1.Property<Guid>("InteractionId");

                            b1.HasKey("Id");

                            b1.HasIndex("InteractionId");

                            b1.ToTable("Choice_Choices_Components");

                            b1.HasOne("Doctrina.Domain.Entities.Interactions.ChoiceInteractionType")
                                .WithMany("Choices")
                                .HasForeignKey("InteractionId")
                                .OnDelete(DeleteBehavior.Cascade);

                            b1.OwnsMany("Doctrina.Domain.Entities.OwnedTypes.LanguageMapEntity", "Description", b2 =>
                                {
                                    b2.Property<string>("Id")
                                        .ValueGeneratedOnAdd();

                                    b2.Property<string>("ComponentId")
                                        .IsRequired();

                                    b2.Property<string>("Description");

                                    b2.Property<string>("LanguageCode");

                                    b2.HasKey("Id");

                                    b2.HasIndex("ComponentId");

                                    b2.ToTable("Choice_Choices_Components_Description");

                                    b2.HasOne("Doctrina.Domain.Entities.Interactions.InteractionComponent")
                                        .WithMany("Description")
                                        .HasForeignKey("ComponentId")
                                        .OnDelete(DeleteBehavior.Cascade);
                                });
                        });
                });

            modelBuilder.Entity("Doctrina.Domain.Entities.Interactions.LikertInteractionType", b =>
                {
                    b.OwnsMany("Doctrina.Domain.Entities.Interactions.InteractionComponent", "Scale", b1 =>
                        {
                            b1.Property<string>("Id")
                                .ValueGeneratedOnAdd();

                            b1.Property<Guid>("InteractionId");

                            b1.HasKey("Id");

                            b1.HasIndex("InteractionId");

                            b1.ToTable("Likert_Scale_Components");

                            b1.HasOne("Doctrina.Domain.Entities.Interactions.LikertInteractionType")
                                .WithMany("Scale")
                                .HasForeignKey("InteractionId")
                                .OnDelete(DeleteBehavior.Cascade);

                            b1.OwnsMany("Doctrina.Domain.Entities.OwnedTypes.LanguageMapEntity", "Description", b2 =>
                                {
                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("ComponentId")
                                        .IsRequired();

                                    b2.Property<string>("Description");

                                    b2.Property<string>("LanguageCode");

                                    b2.HasKey("Id");

                                    b2.HasIndex("ComponentId");

                                    b2.ToTable("Likert_Scale_Components_Description");

                                    b2.HasOne("Doctrina.Domain.Entities.Interactions.InteractionComponent")
                                        .WithMany("Description")
                                        .HasForeignKey("ComponentId")
                                        .OnDelete(DeleteBehavior.Cascade);
                                });
                        });
                });

            modelBuilder.Entity("Doctrina.Domain.Entities.Interactions.MatchingInteractionType", b =>
                {
                    b.OwnsMany("Doctrina.Domain.Entities.Interactions.InteractionComponent", "Source", b1 =>
                        {
                            b1.Property<string>("Id")
                                .ValueGeneratedOnAdd();

                            b1.Property<Guid>("InteractionId");

                            b1.HasKey("Id");

                            b1.HasIndex("InteractionId");

                            b1.ToTable("Matching_Source_Components");

                            b1.HasOne("Doctrina.Domain.Entities.Interactions.MatchingInteractionType")
                                .WithMany("Source")
                                .HasForeignKey("InteractionId")
                                .OnDelete(DeleteBehavior.Cascade);

                            b1.OwnsMany("Doctrina.Domain.Entities.OwnedTypes.LanguageMapEntity", "Description", b2 =>
                                {
                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("ComponentId")
                                        .IsRequired();

                                    b2.Property<string>("Description");

                                    b2.Property<string>("LanguageCode");

                                    b2.HasKey("Id");

                                    b2.HasIndex("ComponentId");

                                    b2.ToTable("Matching_Source_Components_Description");

                                    b2.HasOne("Doctrina.Domain.Entities.Interactions.InteractionComponent")
                                        .WithMany("Description")
                                        .HasForeignKey("ComponentId")
                                        .OnDelete(DeleteBehavior.Cascade);
                                });
                        });

                    b.OwnsMany("Doctrina.Domain.Entities.Interactions.InteractionComponent", "Target", b1 =>
                        {
                            b1.Property<string>("Id")
                                .ValueGeneratedOnAdd();

                            b1.Property<Guid>("InteractionId");

                            b1.HasKey("Id");

                            b1.HasIndex("InteractionId");

                            b1.ToTable("Matching_Target_Components");

                            b1.HasOne("Doctrina.Domain.Entities.Interactions.MatchingInteractionType")
                                .WithMany("Target")
                                .HasForeignKey("InteractionId")
                                .OnDelete(DeleteBehavior.Cascade);

                            b1.OwnsMany("Doctrina.Domain.Entities.OwnedTypes.LanguageMapEntity", "Description", b2 =>
                                {
                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("ComponentId")
                                        .IsRequired();

                                    b2.Property<string>("Description");

                                    b2.Property<string>("LanguageCode");

                                    b2.HasKey("Id");

                                    b2.HasIndex("ComponentId");

                                    b2.ToTable("Matching_Target_Components_Description");

                                    b2.HasOne("Doctrina.Domain.Entities.Interactions.InteractionComponent")
                                        .WithMany("Description")
                                        .HasForeignKey("ComponentId")
                                        .OnDelete(DeleteBehavior.Cascade);
                                });
                        });
                });

            modelBuilder.Entity("Doctrina.Domain.Entities.Interactions.PerformanceInteractionType", b =>
                {
                    b.OwnsMany("Doctrina.Domain.Entities.Interactions.InteractionComponent", "Steps", b1 =>
                        {
                            b1.Property<string>("Id")
                                .ValueGeneratedOnAdd();

                            b1.Property<Guid>("InteractionId");

                            b1.HasKey("Id");

                            b1.HasIndex("InteractionId");

                            b1.ToTable("Performance_Steps_Components");

                            b1.HasOne("Doctrina.Domain.Entities.Interactions.PerformanceInteractionType")
                                .WithMany("Steps")
                                .HasForeignKey("InteractionId")
                                .OnDelete(DeleteBehavior.Cascade);

                            b1.OwnsMany("Doctrina.Domain.Entities.OwnedTypes.LanguageMapEntity", "Description", b2 =>
                                {
                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("ComponentId")
                                        .IsRequired();

                                    b2.Property<string>("Description");

                                    b2.Property<string>("LanguageCode");

                                    b2.HasKey("Id");

                                    b2.HasIndex("ComponentId");

                                    b2.ToTable("Performance_Steps_Components_Description");

                                    b2.HasOne("Doctrina.Domain.Entities.Interactions.InteractionComponent")
                                        .WithMany("Description")
                                        .HasForeignKey("ComponentId")
                                        .OnDelete(DeleteBehavior.Cascade);
                                });
                        });
                });

            modelBuilder.Entity("Doctrina.Domain.Entities.Interactions.SequencingInteractionType", b =>
                {
                    b.OwnsMany("Doctrina.Domain.Entities.Interactions.InteractionComponent", "Choices", b1 =>
                        {
                            b1.Property<string>("Id")
                                .ValueGeneratedOnAdd();

                            b1.Property<Guid>("InteractionId");

                            b1.HasKey("Id");

                            b1.HasIndex("InteractionId");

                            b1.ToTable("Sequencing_Choices_Components");

                            b1.HasOne("Doctrina.Domain.Entities.Interactions.SequencingInteractionType")
                                .WithMany("Choices")
                                .HasForeignKey("InteractionId")
                                .OnDelete(DeleteBehavior.Cascade);

                            b1.OwnsMany("Doctrina.Domain.Entities.OwnedTypes.LanguageMapEntity", "Description", b2 =>
                                {
                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("ComponentId")
                                        .IsRequired();

                                    b2.Property<string>("Description");

                                    b2.Property<string>("LanguageCode");

                                    b2.HasKey("Id");

                                    b2.HasIndex("ComponentId");

                                    b2.ToTable("Sequencing_Choices_Components_Description");

                                    b2.HasOne("Doctrina.Domain.Entities.Interactions.InteractionComponent")
                                        .WithMany("Description")
                                        .HasForeignKey("ComponentId")
                                        .OnDelete(DeleteBehavior.Cascade);
                                });
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
